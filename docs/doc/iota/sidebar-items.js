initSidebarItems({"constant":[["ED25519_ADDRESS_LENGTH","The number of bytes in an Ed25519 address. See https://en.wikipedia.org/wiki/EdDSA#Ed25519 for more information."],["HASHED_INDEX_LENGTH",""],["IOTA_SUPPLY","The total number of IOTAs in circulation."],["MESSAGE_ID_LENGTH","The length of the BLAKE2b-256 hash output."],["MESSAGE_LENGTH_MAX","The maximum number of bytes in a message (1024*32). https://github.com/GalRogozinski/protocol-rfcs/blob/message/text/0017-message/0017-message.md#message-validation"],["MESSAGE_LENGTH_MIN","The minimum number of bytes in a message."],["MILESTONE_MERKLE_PROOF_LENGTH",""],["MILESTONE_PUBLIC_KEY_LENGTH",""],["MILESTONE_SIGNATURE_LENGTH",""],["OUTPUT_ID_LENGTH",""],["TAIL_TRANSACTION_HASH_LEN",""],["TRANSACTION_ID_LENGTH","The number of bytes used to represent a [TransactionId]."]],"enum":[["Address",""],["Api","Each of the node APIs the client uses."],["Error",""],["Error","Error type of the iota client crate."],["Essence","The essence of a transaction describes the data making up the transaction."],["Input",""],["MqttEvent","Mqtt events."],["Output",""],["OutputType","Output type filter."],["Payload","The payload of a message on the tangle."],["SignatureUnlock","A `SignatureUnlock` contains a signature which is used to unlock a transaction input."],["UnlockBlock","An UnlockBlock defines the mechanism by which a transaction input is validated for spending."]],"fn":[["get","gets the storage adapter"],["hash_network","Hash the network id str from the nodeinfo to an u64 for the messageBuilder"],["set","Sets the storage adapter."]],"mod":[["api","High level APIs"],["bee_message","Core data types for messages in the tangle."],["bee_rest_api",""],["builder","Builder of the Client Instance"],["client","The Client module to connect through HORNET or Bee with API usages"],["common","A crate that provides common functionalities shared across multiple crates within the Bee framework, and for applications built on-top."],["error","Error handling in iota-client crate."],["node","Iota node APIs"],["node_manager","The node manager that takes care of sending requests and quroum if enabled"],["pow","Contains traits and implementations to provide and score Proof of Work. RFC https://github.com/Wollac/protocol-rfcs/blob/message-pow/text/0024-message-pow/0024-message-pow.md."],["prelude",""],["storage","Storage adapter"]],"struct":[["AddressOutputsOptions","The outputs query options."],["BrokerOptions","The MQTT broker options."],["Client","An instance of the client using HORNET or Bee URI"],["Client","An instance of the client using HORNET or Bee URI"],["ClientBuilder","Builder to construct client instance with sensible default values"],["ClientBuilder","Builder to construct client instance with sensible default values"],["ClientMiner","The miner used for PoW"],["ClientMinerBuilder","The miner builder."],["ConsumedOutput",""],["CreatedOutput",""],["Ed25519Address",""],["Ed25519Signature",""],["HashedIndex",""],["IndexationPayload",""],["Message","A `Message` is the object that nodes gossip around the network."],["MessageBuilder","A `MessageBuilder` is how you construct a [Message]."],["MessageId","The BLAKE2b-256 hash of the byte contents of the message."],["MigratedFundsEntry",""],["MilestoneId",""],["MilestoneIndex","A wrapper around a `u32` that represents a milestone index."],["MilestonePayload",""],["MilestonePayloadEssence",""],["MilestoneResponse","Milestone data."],["NodeInfoWrapper","NodeInfo wrapper which contains the nodeinfo and the url from the node (useful when multiple nodes are used)"],["OutputId",""],["Parents","A `Message`'s `Parents` are the [`MessageId`]s of the transactions it directly approves."],["ReceiptPayload",""],["ReferenceUnlock","A `ReferenceUnlock` is an `UnlockBlock` that refers to a `SignatureUnlock`."],["RegularEssence","A regular transaction. It includes:"],["RegularEssenceBuilder",""],["Seed","A seed is an arbitrary bytestring used to create the root of the tree."],["SignatureLockedDustAllowanceOutput",""],["SignatureLockedSingleOutput",""],["Storage","Storage struct"],["TailTransactionHash",""],["Topic","A topic."],["TopicEvent","An event from a MQTT topic."],["TransactionId","A `TransactionId` is the Blacke2b256 of a `TransactionPayload`."],["TransactionPayload","A transaction message on the tangle."],["TransactionPayloadBuilder",""],["TreasuryInput",""],["TreasuryOutput",""],["TreasuryTransactionPayload",""],["UnlockBlocks",""],["Url","A parsed URL record."],["UtxoInput","An `UtxoInput` represents an input block within a transaction payload, and references the output from a previous transaction."]],"trait":[["StorageAdapter","The storage adapter."]],"type":[["Result","Type alias of `Result` in iota-client"]]});