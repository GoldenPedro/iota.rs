initSidebarItems({"constant":[["ED25519_ADDRESS_LENGTH","The number of bytes in an Ed25519 address. See https://en.wikipedia.org/wiki/EdDSA#Ed25519 for more information."],["HASHED_INDEX_LENGTH","Length of an `HashedIndex`."],["IOTA_SUPPLY","The total number of IOTA tokens in circulation."],["MESSAGE_ID_LENGTH","The length of a message identifier."],["MESSAGE_LENGTH_MAX","The maximum number of bytes in a message."],["MESSAGE_LENGTH_MIN","The minimum number of bytes in a message."],["MESSAGE_PARENTS_RANGE","The range representing the valid number of parents."],["MILESTONE_ID_LENGTH","The length of a milestone identifier."],["MILESTONE_MERKLE_PROOF_LENGTH","Length of a milestone merkle proof."],["MILESTONE_PUBLIC_KEY_LENGTH","Length of a milestone public key."],["MILESTONE_SIGNATURE_LENGTH","Length of a milestone signature."],["OUTPUT_ID_LENGTH","The length of an `OutputId`."],["TAIL_TRANSACTION_HASH_LEN","The length of a tail transaction hash."],["TRANSACTION_ID_LENGTH","The length of a transaction identifier."]],"enum":[["Address","A generic address supporting different address kinds."],["Api","Each of the node APIs the client uses."],["Error","Error occurring when creating/parsing/validating messages."],["Error","Error type of the iota client crate."],["Essence","A generic essence that can represent different types defining transaction essences."],["Input","A generic input supporting different input kinds."],["MqttEvent","Mqtt events."],["Output","A generic output that can represent different types defining the deposit of funds."],["OutputType","Output type filter."],["Payload","A generic payload that can represent different types defining message payloads."],["SignatureUnlock","A `SignatureUnlock` contains a signature which is used to unlock a transaction input."],["UnlockBlock","Defines the mechanism by which a transaction input is authorized to be consumed."]],"fn":[["get","gets the storage adapter"],["hash_network","Hash the network id str from the nodeinfo to an u64 for the messageBuilder"],["set","Sets the storage adapter."]],"mod":[["api","High level APIs"],["bee_message","Core data types for messages in the tangle."],["bee_rest_api",""],["builder","Builder of the Client Instance"],["client","The Client module to connect through HORNET or Bee with API usages"],["common","A crate that provides common functionalities shared across multiple crates within the Bee framework, and for applications built on-top."],["error","Error handling in iota-client crate."],["node","Iota node APIs"],["node_manager","The node manager that takes care of sending requests and quroum if enabled"],["pow","Contains traits and implementations to provide and score Proof of Work. RFC https://github.com/Wollac/protocol-rfcs/blob/message-pow/text/0024-message-pow/0024-message-pow.md."],["prelude","A prelude for the `bee-message` crate."],["storage","Storage adapter"]],"struct":[["AddressOutputsOptions","The outputs query options."],["BrokerOptions","The MQTT broker options."],["Client","An instance of the client using HORNET or Bee URI"],["Client","An instance of the client using HORNET or Bee URI"],["ClientBuilder","Builder to construct client instance with sensible default values"],["ClientBuilder","Builder to construct client instance with sensible default values"],["ClientMiner","The miner used for PoW"],["ClientMinerBuilder","The miner builder."],["Ed25519Address","An Ed25519 address."],["Ed25519Signature","An Ed25519 signature."],["HashedIndex","`Blake2b256` hash of an index."],["IndexationPayload","A payload which holds an index and associated data."],["Message","Represent the object that nodes gossip around the network."],["MessageBuilder","A builder to build a `Message`."],["MessageId","A message identifier, the BLAKE2b-256 hash of the message bytes. See https://www.blake2.net/ for more information."],["MigratedFundsEntry","Describes funds which were migrated from a legacy network."],["MilestoneId","A milestone identifier, the BLAKE2b-256 hash of the milestone bytes. See https://www.blake2.net/ for more information."],["MilestoneIndex","A wrapper around a `u32` that represents a milestone index."],["MilestonePayload","A payload which defines the inclusion set of other messages in the Tangle."],["MilestonePayloadEssence","Essence of a milestone payload. This is the signed part of a milestone payload."],["MilestoneResponse","Milestone data."],["NodeInfoWrapper","NodeInfo wrapper which contains the nodeinfo and the url from the node (useful when multiple nodes are used)"],["OutputId","The identifier of an `Output`."],["Parents","A [`Message`]'s `Parents` are the [`MessageId`]s of the messages it directly approves."],["ReceiptPayload","Receipt is a listing of migrated funds."],["ReferenceUnlock","An `UnlockBlock` that refers to another unlock block."],["RegularEssence","A transaction regular essence consuming inputs, creating outputs and carrying an optional payload."],["RegularEssenceBuilder","A builder to build a `RegularEssence`."],["Seed","A seed is an arbitrary bytestring used to create the root of the tree."],["SignatureLockedDustAllowanceOutput","A `SignatureLockedDustAllowanceOutput` functions like a `SignatureLockedSingleOutput` but as a special property it is used to increase the allowance/amount of dust outputs on a given address."],["SignatureLockedSingleOutput","An output type which can be unlocked via a signature. It deposits onto one single address."],["Storage","Storage struct"],["TailTransactionHash","Represents a tail transaction hash of a legacy bundle."],["Topic","A topic."],["TopicEvent","An event from a MQTT topic."],["TransactionId","A transaction identifier, the BLAKE2b-256 hash of the transaction bytes. See https://www.blake2.net/ for more information."],["TransactionPayload","A transaction to move funds."],["TransactionPayloadBuilder","A builder to build a `TransactionPayload`."],["TreasuryInput","`TreasuryInput` is an input which references a milestone which generated a `TreasuryOutput`."],["TreasuryOutput","`TreasuryOutput` is an output which holds the treasury of a network."],["TreasuryTransactionPayload","`TreasuryTransaction` represents a transaction which moves funds from the treasury."],["UnlockBlocks","A collection of unlock blocks."],["Url","A parsed URL record."],["UtxoInput","Represents an input referencing an output."]],"trait":[["StorageAdapter","The storage adapter."]],"type":[["Result","Type alias of `Result` in iota-client"]]});